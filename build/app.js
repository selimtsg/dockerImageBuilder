/*! dockerimagebuilder 2018-01-02 */

const winston=require("winston"),Logger=winston.Logger,Console=winston.transports.Console,LoggingWinston=require("@google-cloud/logging-winston"),loggingWinston=new LoggingWinston,logger=new Logger({level:"info",transports:[new Console,loggingWinston]}),express=require("express"),app=express(),Api=require("kubernetes-client");"develop"==process.env.NODE_ENV?process.env.NODE_CONFIG_DIR="./dockerImageBuilder/config":process.env.NODE_CONFIG_DIR="./config";var jobs=require("./bgjobs.js"),request=require("request"),bodyParser=require("body-parser"),compression=require("compression"),util=require("util"),config=require("config").get("dbConfig"),queueUrl="http://127.0.0.1:3001",dockerUrl="http://"+config.get("remoteDocker.host")+":"+config.get("remoteDocker.port"),dockerRegistryUrl="http://"+config.get("dockerRegistry.host")+":"+config.get("dockerRegistry.port"),kubernetesUrl="https://"+config.get("kubernetes.host")+":"+config.get("kubernetes.port"),adminToken=require("config").get("token.admin.value"),async=require("async"),net=require("net");app.use(bodyParser.json()),app.get(["/","/v1"],(e,r)=>{r.setHeader("Content-Type","application/json"),r.send({health:"ok"})}),app.get("/v1/conn",(e,r)=>{request(dockerRegistryUrl+"/v2/",function(e,o,s){void 0!=e&&(logger.error("[Docker Image Builder] ERROR - Registry Connection:",e),logger.error("[Docker Image Builder] ERROR - Registry Connection_statusCode:",o&&o.statusCode)),r.setHeader("Content-Type","application/json"),"200"!=o.statusCode?(r.statusCode=o.statusCode,r.send({category:"registryConnection",status:"err",msg:e})):request(dockerUrl+"/v1.24/containers/json?all=1",function(e,o,s){if(void 0!=e&&(logger.error("[Docker Image Builder] ERROR - Docker Connection:",e),logger.error("[Docker Image Builder] ERROR - Docker Connection_statusCode:",o&&o.statusCode)),"200"!=o.statusCode)r.statusCode=o.statusCode,r.send({category:"dockerConnection",msg:e});else{var t=net.connect(config.get("redis.port"),config.get("redis.host"),function(){t.destroy(),r.send({category:"allConnection",status:"ok",msg:"All Connection Green"})});t.on("error",function(e){t.destroy(),r.statusCode=404,r.send({category:"queueStoreConnection",status:"err",msg:"Redis Not Found"})})}})})}),app.post("/v1/builder/build/:buildconfig",(e,r)=>{var o=e.params.buildconfig,s=e.headers.namespace,t=adminToken;const i=new Api.CustomResourceDefinitions({url:kubernetesUrl,insecureSkipTlsVerify:!0,group:"stable.k8s.io",auth:{bearer:t},namespace:s,resources:["buildconfigs"]});if(void 0==i)return r.status(401).json({status:"error",msg:"Unauthorization"});i.ns.buildconfigs(o).get((e,o)=>applyBuild(e,o,r,t,s))}),app.post("/v1/builder/pullAllNodes/:buildconfig",(e,r)=>{var o=adminToken,s=e.params.buildconfig,t=e.headers.namespace;const i=new Api.CustomResourceDefinitions({url:kubernetesUrl,insecureSkipTlsVerify:!0,group:"stable.k8s.io",auth:{bearer:o},namespace:t,resources:["buildconfigs"]});if(void 0==i)return r.status(401).json({status:"error",msg:"Unauthorization"});i.ns.buildconfigs(s).get((e,s)=>applyPullAllNodes(e,s,r,o,t))}),app.get("/v1/builder/image",(e,r)=>{request(dockerRegistryUrl+"/v2/_catalog",function(e,o,s){void 0!=e&&(logger.error("[Docker Image Builder] ERROR - /v1/builder/image:",e),logger.error("[Docker Image Builder] ERROR - /v1/builder/image statusCode:",o&&o.statusCode),logger.error("[Docker Image Builder] ERROR - /v1/builder/image body:",o.body)),r.setHeader("Content-Type","application/json");var t=JSON.parse(o.body),i=new Array;t=t.repositories,async.each(t,function(e,o){request(dockerRegistryUrl+"/v2/"+e+"/tags/list",function(e,o,s){i.push(JSON.parse(o.body)),i.length==t.length&&r.send({task:"RegistryList",status:"ok",value:i})})})})}),app.listen(3e3,()=>{logger.info("[Docker Image Builder] INFO - DockerImageBuilder API Server Start.. listening on port 3000!")});function applyBuild(e,r,o,s,t){if(void 0==r.spec||""==r.spec)return o.status(400).json({status:"error",msg:"Wrong BuildConfig"});if(void 0==r.spec.gitUrl||""==r.spec.gitUrl)return o.status(400).json({status:"error",msg:"Wrong gitUrl"});if(void 0==r.spec.builderImage||""==r.spec.builderImage)return o.status(400).json({status:"error",msg:"Wrong builderImage"});if(void 0==r.spec.serviceImage||""==r.spec.serviceImage)return o.status(400).json({status:"error",msg:"Wrong serviceImage"});if(void 0==r.spec.tagName||""==r.spec.tagName)return o.status(400).json({status:"error",msg:"Wrong tagName"});logger.info("[Docker Image Builder] INFO - GIT URL > "+r.spec.gitUrl),logger.info("[Docker Image Builder] INFO - Builder Image > "+r.spec.builderImage),logger.info("[Docker Image Builder] INFO - Service Image >  "+r.spec.serviceImage),logger.info("[Docker Image Builder] INFO - Tag Name > "+r.spec.tagName);const i=new Api.CustomResourceDefinitions({url:kubernetesUrl,insecureSkipTlsVerify:!0,group:"stable.k8s.io",auth:{bearer:s},namespace:t,resources:["buildses"]});var n="buildconfig="+r.metadata.name;i.ns.buildses.get({qs:{labelSelector:n}},function(e,i){if(void 0!=e)return o.status(400).json({status:"error",msg:"Error Retreive Builds"});var n=1,a="";logger.info(i.items),i.items.length>0&&(logger.info("buildsResult.items.length >>"+i.items.length),n=i.items.length+1,logger.info("len >> "+n)),a=r.metadata.name+"-builds-"+n,logger.info(a);var g={projectId:r.metadata.name,project:r.spec.gitUrl,builderImage:r.spec.builderImage,projectName:r.spec.serviceImage+":"+r.spec.tagName,tagName:r.spec.tagName,dockerUrl:config.get("remoteDocker.host")+":"+config.get("remoteDocker.port"),token:s,namespace:t,buildConfigId:r.metadata.name,buildsId:a};jobs.createQueue("build",g,o)})}function applyPullAllNodes(e,r,o,s,t){if(logger.info(e),void 0==r.spec||""==r.spec)return o.status(400).json({status:"error",msg:"Wrong BuildConfig"});if(void 0==r.spec.serviceImage||""==r.spec.serviceImage)return o.status(400).json({status:"error",msg:"Wrong serviceImage"});if(void 0==r.spec.tagName||""==r.spec.tagName)return o.status(400).json({status:"error",msg:"Wrong tagName"});logger.info("[Docker Image Builder] INFO - Service Image >  "+r.spec.serviceImage),logger.info("[Docker Image Builder] INFO - Tag Name > "+r.spec.tagName);var i={serviceImage:r.spec.serviceImage+":"+r.spec.tagName,token:s,namespace:t,imageId:r.metadata.name,tagName:r.spec.tagName};jobs.pullAllNodes(i,o)}