/*! dockerimagebuilder 2018-01-02 */

var exports=module.exports={};const winston=require("winston"),Logger=winston.Logger,Console=winston.transports.Console,LoggingWinston=require("@google-cloud/logging-winston"),loggingWinston=new LoggingWinston,logger=new Logger({level:"info",transports:[new Console,loggingWinston]});"develop"==process.env.NODE_ENV?process.env.NODE_CONFIG_DIR="./dockerImageBuilder/config":process.env.NODE_CONFIG_DIR="./config";const Api=require("kubernetes-client");var doneContext,Redis=require("ioredis"),config=require("config").get("dbConfig"),async=require("async"),kubernetesUrl="https://"+config.get("kubernetes.host")+":"+config.get("kubernetes.port"),kue=require("kue"),queue=kue.createQueue({prefix:"q",redis:{port:config.get("redis.port"),host:config.get("redis.host"),db:2,options:{no_ready_check:!0}},disableSearch:!1}),job=new Object,cmd=require("node-cmd"),{spawn:spawn}=require("child_process"),Docker=require("dockerode"),docker=new Docker({host:config.get("remoteDocker.host"),port:config.get("remoteDocker.port")});kue.app.listen(3001),queue.on("error",function(e){logger.error("[Docker Image Builder] ERROR - Queue Object... Reason : ",e)});function cleanupQueue(){kue.Job.rangeByState("complete",0,100,"asc",function(e,t){t.forEach(function(e){e.remove(function(){logger.info("[Docker Image Builder] INFO - Queue Removed. ID is : "+e.id)})})})}exports.createQueue=function(e,t,o){queue.create(e,t).searchKeys(["projectName"]).ttl(6e4).save(function(e){queue.process("build",10,function(e,t){logger.info("[Docker Image Builder] INFO - Build Process Start...."),job=e,doneContext=t;var o=["build","--loglevel","1","-U","tcp://"+e.data.dockerUrl,e.data.project,e.data.builderImage,e.data.projectName],s=spawn("s2i",o),a=0,n=new Date,r=n.getMonth()+1,i=n.getDate(),u=n.getHours(),d=n.getMinutes(),l=n.getSeconds();r<10&&(r="0"+n.getMonth()+1),i<10&&(i="0"+n.getDate()+1),u<10&&(u="0"+n.getHours()),d<10&&(d="0"+n.getMinutes()),l<10&&(l="0"+n.getSeconds());var g=n.getFullYear()+"-"+r+"-"+i+"T"+u+":"+d+":"+l+"Z";s.stderr.on("data",t=>{const o=new Api.CustomResourceDefinitions({url:kubernetesUrl,insecureSkipTlsVerify:!0,group:"stable.k8s.io",auth:{bearer:job.data.token},namespace:job.data.namespace,resources:["buildses"]});kue.Job.get(e.id,function(s,n){var r={apiVersion:"stable.k8s.io/v1",kind:"Builds",metadata:{name:job.data.buildsId,namespace:job.data.namespace,labels:{buildconfig:job.data.buildConfigId}},spec:{serviceImage:e.data.projectName,tagName:e.data.tagName,status:"Building",creDttm:g,endDttm:""}};logger.info("[Docker Image Builder] INFO - Build Logs STDERR : "+t),(t.indexOf("error")>-1||t.indexOf("ERROR")>-1||t.indexOf("exit")>-1||t.indexOf("failed")>-1)&&o.ns.buildses.delete({name:job.data.buildsId},function(t,s){r.spec.status="Failed",r.spec.endDttm=getCurrentTime(),o.ns.buildses(e.data.buildsId).post({body:r},function(e,t){void 0!=e?(logger.error("[Docker Image Builder] ERROR - Kubernetes Builds Object Not Created..."),doneContext(new Error("Build Failed")),cleanupQueue()):(logger.info("[Docker Image Builder] INFO - "+JSON.stringify(t)),doneContext(new Error("Build Failed")),cleanupQueue())})}),a<=1&&o.ns.buildses.delete({name:job.data.buildsId},function(t,s){o.ns.buildses(e.data.buildsId).post({body:r},function(e,t){void 0!=e?(logger.error("[Docker Image Builder] ERROR - Kubernetes Builds Object Not Created..."),logger.error(e)):logger.info("[Docker Image Builder] INFO - "+JSON.stringify(t))})})}),a++}),s.on("error",function(t){var o={apiVersion:"stable.k8s.io/v1",kind:"Builds",metadata:{name:job.data.buildsId,namespace:job.data.namespace,labels:{buildconfig:job.data.buildConfigId}},spec:{serviceImage:e.data.projectName,tagName:e.data.tagName,status:"Failed",creDttm:g,endDttm:getCurrentTime()}};const s=new Api.CustomResourceDefinitions({url:kubernetesUrl,insecureSkipTlsVerify:!0,group:"stable.k8s.io",auth:{bearer:job.data.token},namespace:job.data.namespace,resources:["buildses"]});s.ns.buildses.delete({name:job.data.buildsId},function(t,a){s.ns.buildses(e.data.buildsId).post({body:o},function(e,t){void 0!=e?(logger.error("[Docker Image Builder] ERROR - Kubernetes Builds Object Not Patched...나여??"),doneContext(new Error("Build Failed")),cleanupQueue()):(logger.info("[Docker Image Builder] INFO - "+JSON.stringify(t)),doneContext(new Error("Build Failed")),cleanupQueue())})})}),s.on("exit",function(t,o){var s={apiVersion:"stable.k8s.io/v1",kind:"Builds",metadata:{name:job.data.buildsId,namespace:job.data.namespace,labels:{buildconfig:job.data.buildConfigId}},spec:{serviceImage:e.data.projectName,tagName:e.data.tagName,status:"Pushing",creDttm:g,endDttm:""}};const a=new Api.CustomResourceDefinitions({url:kubernetesUrl,insecureSkipTlsVerify:!0,group:"stable.k8s.io",auth:{bearer:job.data.token},namespace:job.data.namespace,resources:["buildses"]});a.ns.buildses.delete({name:job.data.buildsId},function(t,o){a.ns.buildses(e.data.buildsId).post({body:s},function(t,o){if(void 0!=t)logger.error(t),logger.error("[Docker Image Builder] ERROR - Kubernetes Builds Object Not Created..."),doneContext(new Error("Build Done.. But Image Push Failed")),cleanupQueue();else{logger.info("[Docker Image Builder] INFO - "+JSON.stringify(o));const t=docker.getImage(e.data.projectName),n=e.data.tagName;logger.info("[Docker Image Builder] INFO - Launched Push Image.."),t.push({tag:n,authconfig:{}},(o,n)=>{o&&(logger.error("IS ERROR? >> "+o),s.spec.status="Failed",s.spec.endDttm=getCurrentTime(),a.ns.buildses.delete({name:job.data.buildsId},function(t,o){a.ns.buildses(e.data.buildsId).post({body:s},function(e,t){void 0!=e?(logger.error("[Docker Image Builder] ERROR - Kubernetes Builds Object Not Created..."),doneContext(new Error("Image Push Failed")),cleanupQueue()):(doneContext(new Error("Image Push Failed")),cleanupQueue())})})),n.on("data",function(e){}),n.on("end",function(o){s.spec.status="Completed",s.spec.endDttm=getCurrentTime(),a.ns.buildses.delete({name:job.data.buildsId},function(o,n){a.ns.buildses(e.data.buildsId).post({body:s},function(e,o){void 0!=e?(logger.error(e),logger.error("[Docker Image Builder] ERROR - Kubernetes Builds Object Not Created..."),doneContext(new Error("Image Push Completed")),cleanupQueue()):(logger.info("[Docker Image Builder] INFO - Image Push Completed"),doneContext(),cleanupQueue(),createImageObject(job.data,s.spec.endDttm,t))})})})})}})})})}),o.send({task:"BuildImage",status:"started"})}),job.on("complete",function(e){console.log("Job completed with data ",e)}).on("failed attempt",function(e,t){console.log("Job failed")}).on("failed",function(e){console.log("Job failed")}).on("progress",function(e,t){console.log("\r  job #"+job.id+" "+e+"% complete with data ",t)})},exports.pullAllNodes=function(e,t){const o=new Api.CustomResourceDefinitions({url:kubernetesUrl,insecureSkipTlsVerify:!0,group:"stable.k8s.io",auth:{bearer:e.token},namespace:e.namespace,resources:["images"]});o.ns.images(e.imageId).get(function(t,s){var a=1,n=1,r={apiVersion:"stable.k8s.io/v1",kind:"Image",metadata:{name:s.metadata.name,namespace:s.metadata.namespace,labels:{app:s.metadata.name}},spec:{imageId:s.spec.imageId,env:s.spec.env,ports:s.spec.ports},status:{dockerImageRepository:s.status.dockerImageRepository,tags:s.status.tags,creDttm:s.status.creDttm}};new Api.Core({url:kubernetesUrl,insecureSkipTlsVerify:!0,auth:{bearer:e.token},promises:!0,version:"v1"}).nodes.get().then(function(t){return async.each(t.items,function(s,i){var u=new Docker({host:s.status.addresses[0].address,port:2375});u.pull(e.serviceImage,{authconfig:""},(s,i)=>{u.modem.followProgress(i,function(s,n){s?(logger.info(s),process.exit(1)):(logger.info("[Docker Image Builder] INFO - Partitially pulling... Current::"+a),a==t.items.length&&o.ns.images.delete({name:e.imageId},function(t,s){let a=0;const n=r.status.tags.length;for(;a<n;a++)r.status.tags[a].tag==e.tagName&&(r.status.tags[a].pullAll="AllPulled");o.ns.images(e.imageId).post({body:r},function(e,t){return logger.info("[Docker Image Builder] INFO - allPullNodes done"),!0})}),a++)},function(t){1==n&&(logger.info("[Docker Image Builder] INFO - Change pullAll status..."),o.ns.images.delete({name:e.imageId},function(t,s){let a=0;const n=r.status.tags.length;for(;a<n;a++)r.status.tags[a].tag==e.tagName&&(r.status.tags[a].pullAll="Pulling");o.ns.images(e.imageId).post({body:r},function(e,t){logger.info("[Docker Image Builder] INFO - pullAll status changed to pulling...")})}));n++})})}),!0},function(e){logger.error(e)}).catch(console.log.bind(console))}),t.send({task:"pullAllNodes",status:"started"})};function getCurrentTime(){var e=new Date,t=e.getMonth()+1,o=e.getDate(),s=e.getHours(),a=e.getMinutes(),n=e.getSeconds();t<10&&(t="0"+e.getMonth()+1),o<10&&(o="0"+e.getDate()+1),s<10&&(s="0"+e.getHours()),a<10&&(a="0"+e.getMinutes()),n<10&&(n="0"+e.getSeconds());return e.getFullYear()+"-"+t+"-"+o+"T"+s+":"+a+":"+n+"Z"}function createImageObject(e,t,o){o.inspect(function(o,s){if(o)return logger.error("[Docker Image Builder] ERROR - Inspect Images...Reason >> "+o),!1;var a={apiVersion:"stable.k8s.io/v1",kind:"Image",metadata:{name:e.buildsId.toString().split("-")[0],namespace:e.namespace,labels:{app:e.buildsId.toString().split("-")[0]}},spec:{imageId:s.Id,env:s.Config.Env,ports:s.ContainerConfig.ExposedPorts},status:{dockerImageRepository:e.projectName.split(":")[0]+":"+e.projectName.split(":")[1],tags:[{tag:e.tagName,pullAll:"Ready",status:"Pushed",items:[]}],creDttm:t}};const n=new Api.CustomResourceDefinitions({url:kubernetesUrl,insecureSkipTlsVerify:!0,group:"stable.k8s.io",auth:{bearer:e.token},namespace:e.namespace,resources:["images"]});n.ns.images(e.buildsId.toString().split("-")[0]).get(function(r,i){var u={created:t,dockerImageReference:s.RepoDigests[0].split("@")[0]+"@"+s.Id,image:s.Id},d={tag:e.tagName,pullAll:"Ready",status:"Pushed",items:[]};if(void 0!=r)a.status.tags[0].items.unshift(u),n.ns.images.delete({name:e.buildsId.toString().split("-")[0]},function(t,s){n.ns.images(e.buildsId.toString().split("-")[0]).post({body:a},function(t,s){if(void 0!=o)return logger.error("[Docker Image Builder] ERROR - Create Images Object...Reason >> "+t),!1;logger.info("[Docker Image Builder] INFO - Create Image Object.. ID >> "+e.buildsId.toString().split("-")[0])})});else{var l=new Array,g=0;let t=0;const s=(l=i.status.tags).length;for(;t<s;t++)l[t].tag==e.tagName?l[t].items.unshift(u):g++;g==l.length&&(d.items.unshift(u),l.unshift(d)),a.status.tags=l,n.ns.images.delete({name:e.buildsId.toString().split("-")[0]},function(t,s){n.ns.images(e.buildsId.toString().split("-")[0]).post({body:a},function(t,s){if(void 0!=o)return logger.error("[Docker Image Builder] ERROR - Create Images Object...Reason >> "+t),!1;logger.info("[Docker Image Builder] INFO - Create Image Object.. ID >> "+e.buildsId.toString().split("-")[0])})})}})})}setInterval(cleanupQueue,3e5),queue.watchStuckJobs(1e3);